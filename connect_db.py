import asyncio
import hashlib
import asyncpg

"""
Программа предназначена для подключение к СУБД POSTGRESQL, а также
для создание и вывода пользователей в ТГ-бота.
"""


async def main():
    conn = await asyncpg.connect(host="localhost", port='', user='postgres', password='', database='users')
    # Execute a statement to create a new table.
    await conn.execute('''
        CREATE TABLE users(
            id_user int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name VARCHAR(250) NOT NULL,
            password VARCHAR(300) NOT NULL
            )
    ''')
    await conn.close()


# Insert a record into the created table.
async def insert_db(data_auth):
    """Функция вставки в БД данных."""
    conn = await asyncpg.connect(host="localhost", port='', user='postgres', password='', database='users')
    login = data_auth[0]
    password = hashlib.sha256(data_auth[1].encode('utf-8')).hexdigest()
    res = await conn.execute(f'''
        SELECT login, password FROM users WHERE login = '{login}' 
        AND password = '{password}'
        ''')  # FIXME возможно атака SQL-инъекций.
    if res[7:] == '0':  # Обрезаем слово SELECT c с помощью среза.
        await conn.execute(f'''
                INSERT INTO users(login, password) VALUES('{login}', '{password}')
            ''')
    await conn.close()


async def view_user():
    conn = await asyncpg.connect(host="localhost", port='', user='postgres', password='', database='users')
    user = await conn.execute('SELECT count(id_user) FROM users')
    res = user[7:]
    return res
    await conn.close()

# asyncio.run(main()) # Запустить для создание таблицы.
